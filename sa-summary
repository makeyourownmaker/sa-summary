#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;
use Time::Piece;


my %options = ();

GetOptions(
    \%options,
    'logdir|l=s',
    'file|f=s',
    'top|t=i',
    'sa_threshold|s=i',
    'bayes_threshold|b=f',
    'pos_threshold|p=f',
    'neg_threshold|n=f',
    'margin|m=i',
    'web|w',
    'help|h',
) or usage();

if ($options{help}) {
    usage()
}

%options = check_cli_options(\%options);

main(\%options);


####################################################################################################################################################################################


sub main {
    my %opt = %{(shift)};

    my %sa = get_init_sa_stats();

    opendir my $dh, "$opt{logdir}" or die "Cannot open '$opt{logdir}' for reading: $!\n";
    my @logs = grep { /$opt{file}/ixms } readdir $dh;
    closedir $dh;

    foreach my $log (@logs) {
        %sa = get_logfile_stats( \%sa, "$opt{logdir}/$log" );
    }

    %sa = get_averages(\%sa, 'spam');
    %sa = get_averages(\%sa, 'ham');
    %sa = get_averages(\%sa, 'mail');

    $sa{autolearn}{total} = $sa{autolearn}{spam} + $sa{autolearn}{ham};

    my $secs = 3600;
    $sa{stats}{mail}{time}{total} = $sa{stats}{mail}{time}{total} / $secs;
    $sa{stats}{spam}{time}{total} = $sa{stats}{spam}{time}{total} / $secs;
    $sa{stats}{ham}{time}{total}  = $sa{stats}{ham}{time}{total} / $secs;

    print_total_tables(\%sa, \%opt);
    print_top_tables(\%sa, \%opt)      unless $opt{top}    == 0;
    print_marginals_table(\%sa, \%opt) unless $opt{margin} == 0;
    print_high_low_bayes_tables(\%sa, \%opt)  unless $opt{bayes_threshold} == 0;
    print_high_low_scores_tables(\%sa, \%opt) unless $opt{pos_threshold} == 0 && $opt{neg_threshold} == 0;

    exit;
}


sub get_logfile_stats {
    my %sa  = %{(shift)};
    my $log = shift;

    if ( !-e $log || -d $log ) {
        print "$log not found.\n";
        return;
    }

    open my $fh, '<', $log or die "Cannot open $log: $!\n";
    while (<$fh>) {

        if ( /(\S+)\s+  # datetime
              (\d+)\s+  # stop time
              (\d+)\s+  # start time
              (\d+)\s+  # mail size
              (\S+)\s+  # message ID
              (\w+(\s\w\w)?)\s+             # lang
              (\w+),\s+                     # result
              score=(\-?\d+\.\d+)\s+        # score
              required=5.0\s+tests=(.*)\s+  # rules
              autolearn=(\w+)\s+            # learn
              version=\S+\s+(\S+)/xms
             or
             /(\S+)\s+  # datetime
              (\d+)\s+  # stop time
              (\d+)\s+  # start time
              (\d+)\s+  # mail size
              (\S+)\s+  # message ID
              (\w+(\s\w\w)?)\s+             # lang
              (\w+),\s+                     # result
              score=(\-?\d+\.\d+)\s+        # score
              required=5.0\s+tests=(.*)\s+  # rules
              autolearn=(\w+)\s+            # learn
              autolearn_force=\w+\s+\S+\s+(\S+)/xms ) {

            my $mid = $5;
            $sa{mails}{$mid}{datetime} = $1;
            $sa{mails}{$mid}{time}     = $2 - $3;
            $sa{mails}{$mid}{size}     = $4;
            $sa{mails}{$mid}{score}    = $9;
            $sa{mails}{$mid}{bayes}    = $12;
            $sa{mails}{$mid}{result}   = $8;
            $sa{mails}{$mid}{rules}    = $10;
            $sa{mails}{$mid}{learn}    = $11;
            $sa{mails}{$mid}{lang}     = $6;

            %sa = process_match(\%sa, $mid);
        }
    }
    close $fh;

    return %sa;
}


sub process_match {
    my %sa  = %{(shift)};
    my $mid = shift;

    my $type = 'ham';

    if ( $sa{mails}{$mid}{result} eq 'Yes' ) {
       $type = 'spam';
    }

    $sa{stats}{$type}{time}{total}  += $sa{mails}{$mid}{time};
    $sa{stats}{$type}{size}{total}  += $sa{mails}{$mid}{size};
    $sa{stats}{$type}{bayes}{total} += $sa{mails}{$mid}{bayes};

    $sa{stats}{mail}{time}{total}  += $sa{mails}{$mid}{time};
    $sa{stats}{mail}{size}{total}  += $sa{mails}{$mid}{size};
    $sa{stats}{mail}{bayes}{total} += $sa{mails}{$mid}{bayes};

    if ( $sa{mails}{$mid}{learn} =~ /ham/xms ) {
        $sa{autolearn}{ham}++;
    }
    elsif ( $sa{mails}{$mid}{learn} =~ /spam/xms ) {
        $sa{autolearn}{spam}++;
    }

    my @rules = split /\,/xms, $sa{mails}{$mid}{rules};
    my $num_rules = scalar @rules;

    %sa = update_rules_scores(\%sa, \@rules, $mid, $type);

    %sa = calc_min_max_totals(\%sa, $mid, $type, $num_rules);
    %sa = calc_min_max_totals(\%sa, $mid, 'mail', $num_rules);

    return %sa;
}


sub update_rules_scores {
    my %sa       = %{(shift)};
    my @rules = @{(shift)};
    my $mid      = shift;
    my $type     = shift;

    $sa{mails}{$mid}{neg_score} = 0;
    $sa{mails}{$mid}{pos_score} = 0;

    foreach my $rule (@rules) {
       $sa{stats}{mail}{rules}{count}++;

       my ( $r, $rscore ) = ( $rule =~ /^(.*?)=(.*?)$/xms );
       $sa{RULES}{score}{$r} = $rscore;

       $sa{mails}{$mid}{neg_score} += $rscore if $rscore < 0;
       $sa{mails}{$mid}{pos_score} += $rscore if $rscore > 0;

       $sa{stats}{$type}{rules}{count}++;

       if ( defined $sa{RULES}{$type}{$r} ) {
           $sa{RULES}{$type}{$r}++;
           $sa{SCORES}{$type}{$r} += $rscore;
       }
       else {
           $sa{RULES}{$type}{$r}  = 1;
           $sa{SCORES}{$type}{$r} = $rscore;
           $sa{RULES}{mail}{$r}   = $rscore;
       }
    }

    return %sa;
}


sub calc_min_max_totals {
    my %sa    = %{(shift)};
    my $mid   = shift;
    my $type  = shift;
    my $rules = shift;

    my $score    = $sa{mails}{$mid}{score};
    my $time     = $sa{mails}{$mid}{time};
    my $size     = $sa{mails}{$mid}{size};
    my $bayes    = $sa{mails}{$mid}{bayes};
    my $datetime = $sa{mails}{$mid}{datetime};

    my $types = $type . 's';
    $sa{stats}{$types}++;

    $sa{stats}{$type}{score}{total} += $score;
    $sa{stats}{$type}{score}{min} = $score if $score < $sa{stats}{$type}{score}{min};
    $sa{stats}{$type}{score}{max} = $score if $score > $sa{stats}{$type}{score}{max};
    $sa{stats}{$type}{time}{min}  = $time  if $time  < $sa{stats}{$type}{time}{min};
    $sa{stats}{$type}{time}{max}  = $time  if $time  > $sa{stats}{$type}{time}{max};
    $sa{stats}{$type}{size}{min}  = $size  if $size  < $sa{stats}{$type}{size}{min};
    $sa{stats}{$type}{size}{max}  = $size  if $size  > $sa{stats}{$type}{size}{max};
    $sa{stats}{$type}{rules}{min} = $rules if $rules < $sa{stats}{$type}{rules}{min};
    $sa{stats}{$type}{rules}{max} = $rules if $rules > $sa{stats}{$type}{rules}{max};
    $sa{stats}{$type}{bayes}{min} = $bayes if $bayes < $sa{stats}{$type}{bayes}{min};
    $sa{stats}{$type}{bayes}{max} = $bayes if $bayes > $sa{stats}{$type}{bayes}{max};

    my $epoch     = Time::Piece->strptime($datetime, '%Y.%m.%d-%H:%M:%S')->epoch;
    my $min_epoch = Time::Piece->strptime($sa{stats}{$type}{datetime}{min}, '%Y.%m.%d-%H:%M:%S')->epoch;
    my $max_epoch = Time::Piece->strptime($sa{stats}{$type}{datetime}{max}, '%Y.%m.%d-%H:%M:%S')->epoch;
    $sa{stats}{$type}{datetime}{min} = $datetime if $epoch < $min_epoch;
    $sa{stats}{$type}{datetime}{max} = $datetime if $epoch > $max_epoch;

    return %sa;
}


sub print_total_tables {
    my %sa  = %{(shift)};
    my %opt = %{(shift)};

    print "Content-type: text/html\n\n<pre>\n" if $opt{web};

    my $format_str = "%8s  Autolearn: %5s\n";
    print_autolearn_table(\%sa, $format_str);

    if ( $sa{stats}{spams} == 0 && $sa{stats}{hams} == 0 ) {
        exit;
    }

    $format_str = "From: %24s  To: %24s\n";
    print_from_to_time_table(\%sa, $format_str);

    my $type = 'score';
    $format_str = "TotalScore: %7.2f  MinScore: %7.2f  AvgScore: %6.2f  MaxScore: %6.2f\n";
    print_summary_stats_table(\%sa, \%opt, $format_str, $type);

    $type = 'time';
    $format_str = "TotalTime: %7.2f hours  MinTime: %5.2f sec  AvgTime: %5.2f sec  MaxTime: %5.2f sec\n";
    print_summary_stats_table(\%sa, \%opt, $format_str, $type);

    $type = 'size';
    $format_str = "TotalSize: %7s bytes  MinSize: %8.2f bytes  AvgSize: %8.2f bytes  MaxSize: %8.2f bytes\n";
    print_summary_stats_table(\%sa, \%opt, $format_str, $type);

    $type = 'rules';
    $format_str = "TotalRules: %5s  UniqueRules: %5s  MinRules: %3s  AvgRules: %5.2f  MaxRules: %4s\n";
    print_summary_stats_table(\%sa, \%opt, $format_str, $type);

    $type = 'bayes';
    $format_str = "TotalBayes: %5.2f  MinBayes: %2.2f  AvgBayes: %2.2f  MaxBayes: %2.2f\n";
    print_summary_stats_table(\%sa, \%opt, $format_str, $type);
    br(\%opt);
    br(\%opt);

    return;
}


sub print_top_tables {
    my %sa  = %{(shift)};
    my %opt = %{(shift)};

    my @col_form   = ( "%4s\t%-24s\t%5s\t%8s %7s %7s %7s\n", 'RANK', 'RULE NAME', 'COUNT', '%OFMAIL', '%OFSPAM', '%OFHAM', 'AVGSCO' );
    my @exclusions = qw( count ); # TODO Check if this is still necessary
    my $long_rule  = 'FALSE';

    my $header  = "TOP SPAM RULES FIRED\n";
    my $sortkey = 'RULES';
    my $type    = 'spam';
    my $table = get_sorted_table(\%sa, \%opt, \@exclusions, $sortkey, $type);
    print_rules_table(\%opt, $table, $header, $long_rule, \@col_form);

    $header = "TOP HAM RULES FIRED\n";
    $type   = 'ham';
    $table = get_sorted_table(\%sa, \%opt, \@exclusions, $sortkey, $type);
    print_rules_table(\%opt, $table, $header, $long_rule, \@col_form);


    # Auto-whitelisting is a score averaging system  It will assign +ve or -ve scores https://wiki.apache.org/spamassassin/AutoWhitelist
    @col_form   = ( "%4s\t%-24s\t%5s %8s %7s %7s %7s %7s %7s\n", 'RANK', 'RULE NAME', 'COUNT', '%OFMAIL', '%OFSPAM', '%OFHAM', 'AVGSCO', 'SCORE', 'TOTSCO' );
    @exclusions = qw( AWL count );
    $long_rule  = 'TRUE';

    $header  = "TOP -ve RULES HIT FOR SPAM\n";
    $sortkey = 'SCORES';
    $type    = 'spam';
    $table = get_sorted_table(\%sa, \%opt, \@exclusions, $sortkey, $type);
    print_rules_table(\%opt, $table, $header, $long_rule, \@col_form);

    $header  = "TOP +ve RULES HIT FOR HAM\n";
    $type    = 'ham';
    $table = get_sorted_table(\%sa, \%opt, \@exclusions, $sortkey, $type);
    print_rules_table(\%opt, $table, $header, $long_rule, \@col_form);

    return;
}


sub print_marginals_table {
    my %sa  = %{(shift)};
    my %opt = %{(shift)};


    my @exclusions = qw( AWL count );
    my @col_form   = ( "MESSAGE_ID\n\tSCORE\tDIFF\tRESULT\tTIME\tSIZE\t\tBAYES\tLANG\n\tRULES\n" );
    my $header     = "MARGINAL CLASSIFICATIONS\n";
    my $long_rule  = 'FALSE';

    my $sortkey = 'marginal';
    my $type    = 'marginal';
    my $table = get_sorted_table(\%sa, \%opt, \@exclusions, $sortkey, $type);
    print_rules_table(\%opt, $table, $header, $long_rule, \@col_form);

    return;
}

sub print_high_low_bayes_tables {
    my %sa  = %{(shift)};
    my %opt = %{(shift)};

    my @exclusions = qw( AWL count );
    my @col_form   = ("MESSAGE_ID\n\tSCORE\tDIFF\tRESULT\tTIME\tSIZE\t\tBAYES\n");
    my $header     = "SPAM WITH LOW BAYES SCORES\n";
    my $sortkey    = 'bayes';
    my $long_rule  = 'FALSE';
    my $type  = 'spam';

    my $table = get_sorted_table(\%sa, \%opt, \@exclusions, $sortkey, $type);
    print_rules_table(\%opt, $table, $header, $long_rule, \@col_form);

    $header = "HAM WITH HIGH BAYES SCORES\n";
    $type   = 'ham';
    $table = get_sorted_table(\%sa, \%opt, \@exclusions, $sortkey, $type);
    print_rules_table(\%opt, $table, $header, $long_rule, \@col_form);

    return;
}


sub print_high_low_scores_tables {
    my %sa  = %{(shift)};
    my %opt = %{(shift)};

    my @exclusions = qw( AWL count );
    my @col_form = ( "MESSAGE_ID\n\tSCORE\tDIFF\tPOS\tNEG\tTIME\tSIZE\t\tBAYES\n\tRULES\n" );
    my $header   = "SPAM WITH LOW -VE RULE SCORES\n";
    my $sortkey  = 'neg_score';
    my $long_rule  = 'FALSE';
    my $type     = 'spam';
    my $table = get_sorted_table(\%sa, \%opt, \@exclusions, $sortkey, $type);
    print_rules_table(\%opt, $table, $header, $long_rule, \@col_form);

    $header  = "HAM WITH HIGH +VE RULE SCORES\n";
    $sortkey = 'pos_score';
    $type    = 'ham';
    $table = get_sorted_table(\%sa, \%opt, \@exclusions, $sortkey, $type);
    print_rules_table(\%opt, $table, $header, $long_rule, \@col_form);

    print "</pre>\n</div><div id=\"footer\"></div>\n" if $opt{web};

    return;
}



sub get_averages {
    my %sa   = %{(shift)};
    my $type = shift;

    my $types = $type . 's';

    if ( $sa{stats}{$types} > 0 ) {
        $sa{stats}{$type}{score}{avg} = sprintf '%.2f', $sa{stats}{$type}{score}{total} / $sa{stats}{$types};
        $sa{stats}{$type}{time}{avg}  = sprintf '%.2f', $sa{stats}{$type}{time}{total}  / $sa{stats}{$types};
        $sa{stats}{$type}{size}{avg}  = sprintf '%.2f', $sa{stats}{$type}{size}{total}  / $sa{stats}{$types};
        $sa{stats}{$type}{rules}{avg} = sprintf '%.2f', $sa{stats}{$type}{rules}{count} / $sa{stats}{$types};
        $sa{stats}{$type}{bayes}{avg} = sprintf '%.2f', $sa{stats}{$type}{bayes}{total} / $sa{stats}{$types};
    }

    return %sa;
}


sub get_table_keys {
    my %sa      = %{(shift)};
    my %opt     = %{(shift)};
    my $sortkey = shift;
    my $type    = shift;

    my @keys;

    if ( $sortkey eq 'RULES' || $sortkey eq 'SCORES' ) {
        @keys = sort { $sa{$sortkey}{$type}{$b} <=> $sa{$sortkey}{$type}{$a} } keys %{$sa{$sortkey}{$type}};
    } elsif ( $sortkey eq 'bayes' || $sortkey eq 'pos_score' || $sortkey eq 'neg_score' ) {
        @keys = reverse sort { $sa{mails}{$b}{$sortkey} <=> $sa{mails}{$a}{$sortkey} } keys %{$sa{mails}};
    } elsif ( $sortkey eq 'marginal' ) {
        @keys = reverse sort { abs( $sa{mails}{$b}{score} - $opt{sa_threshold} ) <=> abs( $sa{mails}{$a}{score} - $opt{sa_threshold} ) } keys %{$sa{mails}};
    }

    return @keys;
}


sub get_scores_rules_row {
    my %sa      = %{(shift)};
    my $key     = shift;
    my $sortkey = shift;
    my $type    = shift;
    my $count   = shift;

   	my ($percmail, $percspam, $percham, $avsco) = (0, 0, 0, 0);

    $percmail = sprintf '%.2f', ( ( $sa{RULES}{spam}{$key} + $sa{RULES}{ham}{$key} ) / $sa{stats}{mails} ) * 100;
    $percspam = sprintf '%.2f', ( $sa{RULES}{spam}{$key} / $sa{stats}{spams} ) * 100    if $sa{stats}{spams} > 0;
    $percham  = sprintf '%.2f', ( $sa{RULES}{ham}{$key} / $sa{stats}{hams} ) * 100      if $sa{stats}{hams} > 0;
    $avsco    = sprintf '%.2f', ( $sa{SCORES}{$type}{$key} / $sa{RULES}{$type}{$key} )  if $sa{RULES}{$type}{$key} > 0;

    my $row;
    if ( $sortkey eq 'RULES' ) {
        $row = sprintf "%4d\t%-24s\t%5s\t%6.2f\t%6.2f\t%6.2f\t%6.2f\n",
                       $count + 1, $key, $sa{RULES}{$type}{$key}, $percmail,
                       $percspam, $percham, $avsco;
    } elsif ( $sortkey eq 'SCORES' ) {
        $row = sprintf "%4d\t%-24s\t%5s\t%6.2f\t%6.2f\t%6.2f\t%6.2f\t%2.4f\t%4.4f\n",
                       $count + 1,              $key,
                       $sa{RULES}{$type}{$key}, $percmail,
                       $percspam,               $percham,
                       $avsco,                  $sa{RULES}{score}{$key},
                       $sa{RULES}{score}{$key} * $sa{RULES}{$type}{$key};
    }

    return $row;
}


sub get_bayes_row {
    my %sa  = %{(shift)};
    my %opt = %{(shift)};
    my $key = shift;

    my $row = "$key\n\t$sa{mails}{$key}{score}\t"
            . abs( $sa{mails}{$key}{score} - $opt{sa_threshold} )
            . "\t$sa{mails}{$key}{result}\t$sa{mails}{$key}{time} secs\t"
            . "$sa{mails}{$key}{size} bytes\t$sa{mails}{$key}{bayes}\n\n";

    return $row;
}


sub get_pos_neg_scores_row {
    my %sa  = %{(shift)};
    my %opt = %{(shift)};
    my $key = shift;

    my $row = "$key\n\t$sa{mails}{$key}{score}\t"
            . abs( $sa{mails}{$key}{score} - $opt{sa_threshold} )
            . "\t$sa{mails}{$key}{pos_score}\t$sa{mails}{$key}{neg_score}\t"
            . "$sa{mails}{$key}{time} secs\t$sa{mails}{$key}{size} bytes\t"
            . "$sa{mails}{$key}{bayes}\n\t$sa{mails}{$key}{rules}\n\n";

    return $row;
}


sub get_marginal_row {
    my %sa  = %{(shift)};
    my %opt = %{(shift)};
    my $key = shift;

    my $row = "$key\n\t$sa{mails}{$key}{score}\t"
            . abs( $sa{mails}{$key}{score} - $opt{sa_threshold} )
            . "\t$sa{mails}{$key}{result}\t$sa{mails}{$key}{time} secs\t"
            . "$sa{mails}{$key}{size} bytes\t$sa{mails}{$key}{bayes}\t"
            . "$sa{mails}{$key}{lang}\n\t$sa{mails}{$key}{rules}\t\n\n";

    return $row;
}


sub get_table_row {
    my %sa      = %{(shift)};
    my %opt     = %{(shift)};
    my $key     = shift;
    my $sortkey = shift;
    my $type    = shift;
    my $count   = shift;

    my $row;

    if ( $sortkey eq 'RULES' || $sortkey eq 'SCORES' ) {
        $row = get_scores_rules_row(\%sa, $key, $sortkey, $type, $count);
    } elsif ( $sortkey eq 'bayes' ) {
        $row = get_bayes_row(\%sa, \%opt, $key);
    } elsif ( $sortkey eq 'pos_score' || $sortkey eq 'neg_score' ) {
        $row = get_pos_neg_scores_row(\%sa, \%opt, $key);
    } elsif ( $sortkey eq 'marginal' ) {
        $row = get_marginal_row(\%sa, \%opt, $key);
    }

    return $row;
}


sub check_scores_exclusions {
    my %sa   = %{(shift)};
    my $key  = shift;
    my $type = shift;

    my $exclusions = 0;

    if ( $type eq 'ham' && $sa{RULES}{score}{$key} < 0 ) {
        $exclusions = 1;
    }

    if ( $type eq 'spam' && $sa{RULES}{score}{$key} > 0 ) {
        $exclusions = 1;
    }

    return $exclusions;
}


sub check_rules_exclusions {
    my %sa   = %{(shift)};
    my $key  = shift;
    my $type = shift;

    my $exclusions = 0;

    if ( $sa{RULES}{$type}{$key} == 0 ) {
        $exclusions = 1;
    }

    return $exclusions;
}


sub check_bayes_exclusions {
    my %sa   = %{(shift)};
    my %opt  = %{(shift)};
    my $key  = shift;
    my $type = shift;

    my $exclusions = 0;

    if ( $type eq 'spam' ) {
        if ( $sa{mails}{$key}{result} eq 'No' ) {
            $exclusions = 1;
        }

        if ( $sa{mails}{$key}{bayes} >= $opt{bayes_threshold} ) {
            $exclusions = 1;
        }
    }

    if ( $type eq 'ham' ) {
        if ( $sa{mails}{$key}{result} eq 'Yes' ) {
            $exclusions = 1;
        }

        if ( $sa{mails}{$key}{bayes} <= $opt{bayes_threshold} ) {
            $exclusions = 1;
        }
    }

    return $exclusions;
}


sub check_pos_neg_score_exclusions {
    my %sa   = %{(shift)};
    my %opt  = %{(shift)};
    my $key  = shift;
    my $type = shift;

    my $exclusions = 0;

    if ( $type eq 'spam' ) {
        if ( $sa{mails}{$key}{result} eq 'No' ) {
            $exclusions = 1;
        }

        if ( $sa{mails}{$key}{neg_score} >= $opt{neg_threshold} ) {
            $exclusions = 1;
        }
    }

    if ( $type eq 'ham' ) {
        if ( $sa{mails}{$key}{result} eq 'Yes' ) {
            $exclusions = 1;
        }

        if ( $sa{mails}{$key}{pos_score} <= $opt{pos_threshold} ) {
            $exclusions = 1;
        }
    }

    return $exclusions;
}


sub check_marginal_exclusions {
    my %sa   = %{(shift)};
    my %opt  = %{(shift)};
    my $key  = shift;
    my $type = shift;

    my $exclusions = 0;

    if ( $sa{mails}{$key}{score} < $opt{sa_threshold} - $opt{margin} ) {
        $exclusions = 1;
    }

    if ( $sa{mails}{$key}{score} > $opt{sa_threshold} + $opt{margin} ) {
        $exclusions = 1;
    }

    return $exclusions;
}



sub check_exclusions {
    my %sa      = %{(shift)};
    my %opt     = %{(shift)};
    my $key     = shift;
    my $sortkey = shift;
    my $type    = shift;

    my $exclusions = 0;

    if ( $sortkey eq 'SCORES' ) {
        $exclusions = check_scores_exclusions(\%sa, $key, $type);
    } elsif ( $sortkey eq 'RULES' ) {
        $exclusions = check_rules_exclusions(\%sa, $key, $type);
    } elsif ( $sortkey eq 'bayes' ) {
        $exclusions = check_bayes_exclusions(\%sa, \%opt, $key, $type);
    } elsif ( $sortkey eq 'pos_score' || $sortkey eq 'neg_score' ) {
        $exclusions = check_pos_neg_score_exclusions(\%sa, \%opt, $key, $type);
    } elsif ( $sortkey eq 'marginal' ) {
        $exclusions = check_marginal_exclusions(\%sa, \%opt, $key, $type);
    }

    return $exclusions;
}


sub get_sorted_table {
    my %sa       = %{(shift)};
    my %opt      = %{(shift)};
    my @excludes = @{(shift)};
    my $sortkey  = shift;
    my $type     = shift;

    my $count    = 0;
    my $table    = '';
    my $checkkey = $type eq 'spam' ? 'ham' : 'spam';

    my @keys = get_table_keys(\%sa, \%opt, $sortkey, $type);

    foreach my $key ( @keys ) {
        next if check_exclusions(\%sa, \%opt, $key, $sortkey, $type);
        next if grep { /^$key$/xms } @excludes;

    	$sa{RULES}{$checkkey}{$key} = 0 unless defined $sa{RULES}{$checkkey}{$key};

        $table .= get_table_row(\%sa, \%opt, $key, $sortkey, $type, $count);

        $count++;
        if ( $count >= $opt{top} ) {
            last;
        }
    }

    return $table;
}


sub print_autolearn_table {
    my %sa         = %{(shift)};
    my $format_str = shift;

    printf "Email: $format_str", $sa{stats}{mails}, $sa{autolearn}{total};
    printf "Spam:  $format_str", $sa{stats}{spams}, $sa{autolearn}{spam};
    printf "Ham:   $format_str", $sa{stats}{hams},  $sa{autolearn}{ham};

    return;
}


sub print_from_to_time_table {
    my %sa         = %{(shift)};
    my $format_str = shift;

    print "\n";
    printf "Email: $format_str",
           Time::Piece->strptime($sa{stats}{mail}{datetime}{min}, '%Y.%m.%d-%H:%M:%S'),
           Time::Piece->strptime($sa{stats}{mail}{datetime}{max}, '%Y.%m.%d-%H:%M:%S');
    printf "Spam:  $format_str",
           Time::Piece->strptime($sa{stats}{spam}{datetime}{min}, '%Y.%m.%d-%H:%M:%S'),
           Time::Piece->strptime($sa{stats}{spam}{datetime}{max}, '%Y.%m.%d-%H:%M:%S') unless $sa{stats}{spams} == 0;
    printf "Ham:   $format_str",
           Time::Piece->strptime($sa{stats}{ham}{datetime}{min},  '%Y.%m.%d-%H:%M:%S'),
           Time::Piece->strptime($sa{stats}{ham}{datetime}{max},  '%Y.%m.%d-%H:%M:%S') unless $sa{stats}{hams} == 0;

    return;
}


sub print_summary_stats_table {
    my %sa         = %{(shift)};
    my %opt        = %{(shift)};
    my $format_str = shift;
    my $type       = shift;

    br(\%opt);

    if ( $type eq 'rules' ) {
        my $UNIQ_SPAM_RULES  = keys %{$sa{RULES}{spam}};
        my $UNIQ_HAM_RULES   = keys %{$sa{RULES}{ham}};
        my $UNIQ_EMAIL_RULES = $UNIQ_SPAM_RULES + $UNIQ_HAM_RULES;

        printf "Email: $format_str", $sa{stats}{mail}{rules}{count},
               $UNIQ_EMAIL_RULES, $sa{stats}{mail}{rules}{min},
               $sa{stats}{mail}{rules}{avg}, $sa{stats}{mail}{rules}{max};
        printf "Spam:  $format_str", $sa{stats}{spam}{rules}{count},
               $UNIQ_SPAM_RULES, $sa{stats}{spam}{rules}{min},
               $sa{stats}{spam}{rules}{avg}, $sa{stats}{spam}{rules}{max}
               unless $sa{stats}{spams} == 0;
        printf "Ham:   $format_str", $sa{stats}{ham}{rules}{count},
               $UNIQ_HAM_RULES, $sa{stats}{ham}{rules}{min},
               $sa{stats}{ham}{rules}{avg}, $sa{stats}{ham}{rules}{max}
               unless $sa{stats}{hams} == 0;
    }
    else {
        printf "Email: $format_str", $sa{stats}{mail}{$type}{total},
                $sa{stats}{mail}{$type}{min}, $sa{stats}{mail}{$type}{avg},
                $sa{stats}{mail}{$type}{max};
        printf "Spam:  $format_str", $sa{stats}{spam}{$type}{total},
                $sa{stats}{spam}{$type}{min}, $sa{stats}{spam}{$type}{avg},
                $sa{stats}{spam}{$type}{max} unless $sa{stats}{spams} == 0;
        printf "Ham:   $format_str", $sa{stats}{ham}{$type}{total},
                $sa{stats}{ham}{$type}{min}, $sa{stats}{ham}{$type}{avg},
                $sa{stats}{ham}{$type}{max} unless $sa{stats}{hams}  == 0;
    }

    return;
}


sub print_rules_table {
    my %opt  = %{(shift)};
    my $table    = shift;
    my $header   = shift;
    my $rule_len = shift;
    my @col_form = @{(shift)};

    if ( length($table) > 0 ) {
        print $header;
        hr(\%opt, $rule_len);
        printf @col_form;
        hr(\%opt, $rule_len);
        print $table;
        hr(\%opt, $rule_len);
        br(\%opt);
        br(\%opt);
    }

    return;
}


sub hr {
    my %opt  = %{(shift)};
	my $long = shift;

    if ($opt{web}) {
        print "<hr size=1 width=50% align=left>\n";
    }
    else {
        print '-' x 80;
        print '-' x 14 if $long eq 'TRUE';
        print "\n";
    }

    return;
}


sub br {
    my %opt = %{(shift)};

    if ($opt{web}) {
        print '<br>';
    }

    print "\n";

    return;
}


sub get_option_defaults {
    my %opt = %{(shift)};

    # Defaults
    $opt{sa_threshold}    = 5    unless defined $opt{sa_threshold};
    $opt{bayes_threshold} = 0.5  unless defined $opt{bayes_threshold};
    $opt{pos_threshold}   = 2    unless defined $opt{pos_threshold};
    $opt{neg_threshold}   = -0.1 unless defined $opt{neg_threshold};
    $opt{margin}          = 4    unless defined $opt{margin}; # 4 is a pretty wide margin!

    $opt{top}    = 20  unless defined $opt{top};
    $opt{logdir} = '.' unless defined $opt{logdir};
    $opt{file}   = '^maillog$' unless defined $opt{file}; # regex

    return %opt;
}


sub check_option_values {
    my %opt = %{(shift)};

    if ( $opt{top} !~ /^[+-]?\d+$/xms ) {
        print "ERROR: Number of top rules to display must be numeric value (1 to 20)\n";
        exit;
    }

    if ( $opt{top} < 0 || $opt{top} > 20 ) {
        print "ERROR: Number of top rules to display must be numeric value (1 to 20)\n";
        exit;
    }

    if ( $opt{bayes_threshold} > 1 || $opt{bayes_threshold} < 0 ) {
        print "ERROR: Bayes threshold must be numeric value (0 to 1)\n";
        exit;
    }

    if ( $opt{pos_threshold} < 0 ) {
        print "ERROR: Positve score threshold must be greater than or equal to 0\n";
        exit;
    }

    if ( $opt{neg_threshold} > 0 ) {
        print "ERROR: Negative score threshold must be less than or equal to 0\n";
        exit;
    }

    if ( $opt{margin} < 0 ) {
        print "ERROR: Margin must be greater than or equal to 0\n";
        exit;
    }

    return %opt;
}


sub check_cli_options {
    my %opt = %{(shift)};

    %opt = get_option_defaults(\%opt);
    %opt = check_option_values(\%opt);

    return %opt;
}


sub usage {

    print qq {\nDescription:
sa-summary is a perl script for summarising spam log files.  Statistics on
rules, spamassassin scores, Bayes scores, time spent processing mail and
file size of mails are provided.

Usage: sa-summary [-l <dir>] [-f <file>] [-t <integer>] [-s <integer>] [-b <float>]
\t\t  [-p <float>] [-n <float>] [-m <integer>] [-w] [-h]

Options:
\t--logdir, -l <dir>\tDirectory containing spamd logs (default '.')
\t--file, -f <file>\tFile name or regex to look for in the logdir (default '^maillog\$')
\t--top, -t <integer>\tNumber of top rules to display (default 20)
\t--sa_threshold, -s <integer>\tSpamassassin score threshold (default 5)
\t--bayes_threshold, -b <float>\tBayes classifier threshold (default 0.5)
\t--pos_threshold, -p <float>\tPositive spamassassin score threshold (default 2)
\t--neg_threshold, -n <float>\tNegative spamassassin score threshold (default -0.1)
\t--margin, -m <integer>\tPlus/minus margin for marginal classifications (default 4)
\t--web, -w\t\tPrint web friendly output
\t--help, -h\t\tPrints this help

Examples:
$0 -f spam.log       # Summarise spam.log file
$0 -f spam.log -n 5  # Display top 5 rules

See also: https://github.com/makeyourownmaker/sa-summary\n
};

    exit;
}


sub get_init_sa_stats {

    my %sa;

    $sa{stats}{mails} = 0;
    $sa{stats}{spams} = 0;
    $sa{stats}{hams}  = 0;

    #my @names = qw( time size bayes );
    #@{$sa{stats}{mail}}{@names} = (0, 0, 0);
    #@{$sa{stats}{spam}}{@names} = (0, 0, 0);
    #@{$sa{stats}{ham}}{@names}  = (0, 0, 0);

    ( $sa{stats}{mail}{time}{total},  $sa{stats}{spam}{time}{total},  $sa{stats}{ham}{time}{total}  ) = ( 0, 0, 0 );
    ( $sa{stats}{mail}{size}{total},  $sa{stats}{spam}{size}{total},  $sa{stats}{ham}{size}{total}  ) = ( 0, 0, 0 );
    ( $sa{stats}{mail}{bayes}{total}, $sa{stats}{spam}{bayes}{total}, $sa{stats}{ham}{bayes}{total} ) = ( 0, 0, 0 );
    #( $sa{stats}{mail}{scores}{total}, $sa{stats}{spam}{scores}{total}, $sa{stats}{ham}{scores}{total} ) = ( 0, 0, 0 );
    ( $sa{stats}{mail}{rules}{count}, $sa{stats}{spam}{rules}{count}, $sa{stats}{ham}{rules}{count} ) = ( 0, 0, 0 );

    ( $sa{stats}{mail}{score}{min}, $sa{stats}{spam}{score}{min}, $sa{stats}{ham}{score}{min} ) = ( 50, 50, 50 );
    ( $sa{stats}{mail}{score}{max}, $sa{stats}{spam}{score}{max}, $sa{stats}{ham}{score}{max} ) = ( -50, -50, -50 );
    ( $sa{stats}{mail}{time}{min},  $sa{stats}{spam}{time}{min},  $sa{stats}{ham}{time}{min}  ) = ( 60, 60, 60 );
    ( $sa{stats}{mail}{time}{max},  $sa{stats}{spam}{time}{max},  $sa{stats}{ham}{time}{max}  ) = ( 0, 0, 0 );
    ( $sa{stats}{mail}{size}{min},  $sa{stats}{spam}{size}{min},  $sa{stats}{ham}{size}{min}  ) = ( 100000, 100000, 100000 );
    ( $sa{stats}{mail}{size}{max},  $sa{stats}{spam}{size}{max},  $sa{stats}{ham}{size}{max}  ) = ( 0, 0, 0 );
    ( $sa{stats}{mail}{rules}{min}, $sa{stats}{spam}{rules}{min}, $sa{stats}{ham}{rules}{min} ) = ( 100, 100, 100 );
    ( $sa{stats}{mail}{rules}{max}, $sa{stats}{spam}{rules}{max}, $sa{stats}{ham}{rules}{max} ) = ( 0, 0, 0 );
    ( $sa{stats}{mail}{bayes}{min}, $sa{stats}{spam}{bayes}{min}, $sa{stats}{ham}{bayes}{min} ) = ( 1, 1, 1 );
    ( $sa{stats}{mail}{bayes}{max}, $sa{stats}{spam}{bayes}{max}, $sa{stats}{ham}{bayes}{max} ) = ( 0, 0, 0 );
    ( $sa{stats}{mail}{datetime}{min}, $sa{stats}{spam}{datetime}{min}, $sa{stats}{ham}{datetime}{min} ) = ( '9999.12.31-00:00:00', '9999.12.31-00:00:00', '9999.12.31-00:00:00' );
    ( $sa{stats}{mail}{datetime}{max}, $sa{stats}{spam}{datetime}{max}, $sa{stats}{ham}{datetime}{max} ) = ( '1970.01.01-00:00:00', '1970.01.01-00:00:00', '1970.01.01-00:00:00' );

    $sa{autolearn}{ham} = $sa{autolearn}{spam} = $sa{autolearn}{total} = 0;

    return %sa;
}
